/**
 * This file contain global object (window) in state which will provide Collboard app for the modules
 * But this is lightweight faked version for just extracting manifest from the modules
 * Note: It is done in JavaScript (not TypeScript) because ...
 * Note: Using here full function notation (not arrow notation) to allow using deepFake to be contructable (new deepFake() is working)
 */

/**
 * Creates an object that has any property you want
 *  which has any property you want
 *   which has any property you want
 *    which has any property you want
 *     ...
 * + Everything is callable and return the deep fake object
 * Taken from @see https://github.com/hejny/unundefined/blob/main/src/utils/createDeepFake.ts
 *
 * @returns this fake object+function
 */
function createDeepFake(maxRecursion = 10) {
    // TODO: transform maxRecursion to origin
    return new Proxy(createDeepFake, {
        get() {
            if (maxRecursion === 0) {
                return undefined;
            } else {
                return createDeepFake(maxRecursion - 1);
            }
        },
    });
}

/**
 * Proxies an object so that non of the properties will be undefined.
 * Taken from @see https://github.com/hejny/unundefined/blob/main/src/unundefine.ts
 *
 * @param object
 * @returns object which will never return undefined
 */
function unundefine(object, maxRecursion = 10) {
    // TODO: transform maxRecursion to origin
    return new Proxy(object, {
        get(target, key, reciever) {
            const ownValue = Reflect.get(target, key, reciever);

            if (ownValue !== undefined) {
                if (typeof ownValue === 'object' && ownValue !== null) {
                    return unundefine(ownValue, maxRecursion - 1);
                } else {
                    return ownValue;
                }
            }

            if (key === 'toString') {
                return () => '[object Object]'; // <- TODO: Probbably sth better like "[fake Object]"
            }

            if (key === 'toValue') {
                return () => 0;
            }

            if (key === 'toJSON') {
                return () => object;
            }

            return createDeepFake(maxRecursion - 1);
        },
    });
}

function factor(factorable) {
    if (typeof factorable === 'function') {
        try {
            return factorable();
        } catch (error) {
            // TODO: Move class detection to all other factor implementations
            if (
                error instanceof Error &&
                /^Class constructor [a-zA-Z0-9_$]+ cannot be invoked without 'new'/.test(error.message)
            ) {
                return new factorable();
            } else {
                throw error;
            }
        }
    } else {
        return factorable;
    }
}

module.exports = function createMockedCollboardEnvironment(declaredModuleDefinitionCallback) {
    const deepFake = createDeepFake();
    const virtualWindow = {
        document: unundefine({
            // Note: This fake currentScript is required to avoid error in VM2 when the bundle is created by webpack with option output.publicPath
            currentScript: {
                src: 'http://localhost/main.js',
            },
        }),
        declareModule(module) {
            const moduleDefinition = factor(module);

            if (!moduleDefinition.manifest) {
                // Note: This should be trurly ModuleDeclarationMissingManifestError
                throw new Error(
                    `Cannot declare module without defined manifest. Modules without manifest (anonymous modules) are typically used as submodules for example as activated tool.`,
                );
            }

            declaredModuleDefinitionCallback(moduleDefinition);
        },
        CollboardSdk: new Proxy(
            {
                // Note: Here we are faking CollboardSdk
                // TODO: When there will be fully separated makers in separate library, faking makers would be useless

                makeArtModule(artClass) {
                    // TODO: Some clear rules how to name serializeName and module names (+ adding scopes and versions there)
                    // TODO: How to handle versioning in arts?
                    // TODO: Supports should be inferred from the setup behavior

                    return {
                        manifest: {
                            ...artClass.manifest,
                            supports: {
                                art: artClass.serializeName,
                            },
                        },
                        setup() {
                            return () => {
                                throw new Error(
                                    `This code should not be called because it is only mock for extracting manifests`,
                                );
                            };
                        },
                    };
                },

                makeAttributeModule(protoModule) {
                    // TODO: Supports should be inferred from the setup behavior
                    const module = {
                        ...protoModule,
                    };

                    if (protoModule.standard) {
                        module.manifest.supports = {
                            attribute: protoModule.attribute.name,
                        };
                    }

                    return module;
                },

                NOT_CONSTRUCTABLE: Symbol(`This object is not constructable`),
            },
            {
                get: (target, property, receiver) => {
                    if (target[property]) {
                        return target[property];
                    } else if (/^make/.test(property)) {
                        return (protoModule) => {
                            return protoModule;
                        };
                    } else if (/^Abstract/.test(property)) {
                        return class {};
                    } else {
                        return unundefine({});
                    }
                },
            },
        ),

        // Note: window,self and this will be assigned to virtualWindow statement bellow
        window: null,
        self: null,
        this: null,
    };
    virtualWindow.window = virtualWindow;
    virtualWindow.self = virtualWindow;
    virtualWindow.this = virtualWindow;
    // Note: This is making trouble in node runtime
    //     > virtualWindow.global = virtualWindow;

    function getFromGlobalScope(key) {
        try {
            // tslint:disable-next-line no-eval
            const value = eval(key);
            if (value !== undefined) {
                return value;
            } else {
                return null;
            }
        } catch (error) {
            return null;
        }
    }

    for (const key of BROWSER_WINDOW_KEYS /* <- BROWSER_WINDOW_KEYS, TEST_BROWSER_WINDOW_KEYS */) {
        if (virtualWindow[key] !== undefined) {
            // Note: We do not want to override already assigned values
            // tslint:disable-next-line no-console
            console.info(`${key}: Keeping version from prepared in virtualWindow above`);
            continue;
        }

        const value = getFromGlobalScope(key);

        if (value !== null) {
            if (KEYS_TO_DEEPFAKE.includes(key)) {
                // tslint:disable-next-line no-console
                console.info(`${key}: Taking version from global scope and unundefine it`);
                virtualWindow[key] = unundefine(value);
            } else {
                // tslint:disable-next-line no-console
                console.info(`${key}: Keeping version from global scope`);
                // Note: Just keeping in global space
                //     > virtualWindow[key] = value;
            }
        } else {
            // tslint:disable-next-line no-console
            console.info(`${key}: Deepfaking it`);
            virtualWindow[key] = deepFake;
        }
    }

    return virtualWindow;
};

/**/
const KEYS_TO_DEEPFAKE = ['URL' /* <- Note: URL in node does not have createObjectURL */];
/**/
/**/
const TEST_BROWSER_WINDOW_KEYS = ['URL'];
/**/
/**/
const BROWSER_WINDOW_KEYS = [
    'Object',
    'Function',
    'Array',
    'Number',
    'parseFloat',
    'parseInt',
    'Infinity',
    'NaN',
    //'undefined',
    'Boolean',
    'String',
    'Symbol',
    'Date',
    'Promise',
    'RegExp',
    'Error',
    'AggregateError',
    'EvalError',
    'RangeError',
    'ReferenceError',
    'SyntaxError',
    'TypeError',
    'URIError',
    'globalThis',
    'JSON',
    'Math',
    'Intl',
    'ArrayBuffer',
    'Uint8Array',
    'Int8Array',
    'Uint16Array',
    'Int16Array',
    'Uint32Array',
    'Int32Array',
    'Float32Array',
    'Float64Array',
    'Uint8ClampedArray',
    'BigUint64Array',
    'BigInt64Array',
    'DataView',
    'Map',
    'BigInt',
    'Set',
    'WeakMap',
    'WeakSet',
    'Proxy',
    'Reflect',
    'FinalizationRegistry',
    'WeakRef',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    'escape',
    'unescape',
    'eval',
    'isFinite',
    'isNaN',
    // 'console',
    'Option',
    'Image',
    'Audio',
    'webkitURL',
    'webkitRTCPeerConnection',
    'webkitMediaStream',
    'WebKitMutationObserver',
    'WebKitCSSMatrix',
    'XPathResult',
    'XPathExpression',
    'XPathEvaluator',
    'XMLSerializer',
    'XMLHttpRequestUpload',
    'XMLHttpRequestEventTarget',
    'XMLHttpRequest',
    'XMLDocument',
    'WritableStreamDefaultWriter',
    'WritableStreamDefaultController',
    'WritableStream',
    'Worker',
    'Window',
    'WheelEvent',
    'WebSocket',
    'WebGLVertexArrayObject',
    'WebGLUniformLocation',
    'WebGLTransformFeedback',
    'WebGLTexture',
    'WebGLSync',
    'WebGLShaderPrecisionFormat',
    'WebGLShader',
    'WebGLSampler',
    'WebGLRenderingContext',
    'WebGLRenderbuffer',
    'WebGLQuery',
    'WebGLProgram',
    'WebGLFramebuffer',
    'WebGLContextEvent',
    'WebGLBuffer',
    'WebGLActiveInfo',
    'WebGL2RenderingContext',
    'WaveShaperNode',
    'VisualViewport',
    'ValidityState',
    'VTTCue',
    'UserActivation',
    'URLSearchParams',
    'URL',
    'UIEvent',
    'TreeWalker',
    'TransitionEvent',
    'TransformStream',
    'TrackEvent',
    'TouchList',
    'TouchEvent',
    'Touch',
    'TimeRanges',
    'TextTrackList',
    'TextTrackCueList',
    'TextTrackCue',
    'TextTrack',
    'TextMetrics',
    'TextEvent',
    'TextEncoderStream',
    'TextEncoder',
    'TextDecoderStream',
    'TextDecoder',
    'Text',
    'TaskAttributionTiming',
    'SyncManager',
    'SubmitEvent',
    'StyleSheetList',
    'StyleSheet',
    'StylePropertyMapReadOnly',
    'StylePropertyMap',
    'StorageEvent',
    'Storage',
    'StereoPannerNode',
    'StaticRange',
    'ShadowRoot',
    'Selection',
    'SecurityPolicyViolationEvent',
    'ScriptProcessorNode',
    'ScreenOrientation',
    'Screen',
    'SVGViewElement',
    'SVGUseElement',
    'SVGUnitTypes',
    'SVGTransformList',
    'SVGTransform',
    'SVGTitleElement',
    'SVGTextPositioningElement',
    'SVGTextPathElement',
    'SVGTextElement',
    'SVGTextContentElement',
    'SVGTSpanElement',
    'SVGSymbolElement',
    'SVGSwitchElement',
    'SVGStyleElement',
    'SVGStringList',
    'SVGStopElement',
    'SVGSetElement',
    'SVGScriptElement',
    'SVGSVGElement',
    'SVGRectElement',
    'SVGRect',
    'SVGRadialGradientElement',
    'SVGPreserveAspectRatio',
    'SVGPolylineElement',
    'SVGPolygonElement',
    'SVGPointList',
    'SVGPoint',
    'SVGPatternElement',
    'SVGPathElement',
    'SVGNumberList',
    'SVGNumber',
    'SVGMetadataElement',
    'SVGMatrix',
    'SVGMaskElement',
    'SVGMarkerElement',
    'SVGMPathElement',
    'SVGLinearGradientElement',
    'SVGLineElement',
    'SVGLengthList',
    'SVGLength',
    'SVGImageElement',
    'SVGGraphicsElement',
    'SVGGradientElement',
    'SVGGeometryElement',
    'SVGGElement',
    'SVGForeignObjectElement',
    'SVGFilterElement',
    'SVGFETurbulenceElement',
    'SVGFETileElement',
    'SVGFESpotLightElement',
    'SVGFESpecularLightingElement',
    'SVGFEPointLightElement',
    'SVGFEOffsetElement',
    'SVGFEMorphologyElement',
    'SVGFEMergeNodeElement',
    'SVGFEMergeElement',
    'SVGFEImageElement',
    'SVGFEGaussianBlurElement',
    'SVGFEFuncRElement',
    'SVGFEFuncGElement',
    'SVGFEFuncBElement',
    'SVGFEFuncAElement',
    'SVGFEFloodElement',
    'SVGFEDropShadowElement',
    'SVGFEDistantLightElement',
    'SVGFEDisplacementMapElement',
    'SVGFEDiffuseLightingElement',
    'SVGFEConvolveMatrixElement',
    'SVGFECompositeElement',
    'SVGFEComponentTransferElement',
    'SVGFEColorMatrixElement',
    'SVGFEBlendElement',
    'SVGEllipseElement',
    'SVGElement',
    'SVGDescElement',
    'SVGDefsElement',
    'SVGComponentTransferFunctionElement',
    'SVGClipPathElement',
    'SVGCircleElement',
    'SVGAnimationElement',
    'SVGAnimatedTransformList',
    'SVGAnimatedString',
    'SVGAnimatedRect',
    'SVGAnimatedPreserveAspectRatio',
    'SVGAnimatedNumberList',
    'SVGAnimatedNumber',
    'SVGAnimatedLengthList',
    'SVGAnimatedLength',
    'SVGAnimatedInteger',
    'SVGAnimatedEnumeration',
    'SVGAnimatedBoolean',
    'SVGAnimatedAngle',
    'SVGAnimateTransformElement',
    'SVGAnimateMotionElement',
    'SVGAnimateElement',
    'SVGAngle',
    'SVGAElement',
    'Response',
    'ResizeObserverSize',
    'ResizeObserverEntry',
    'ResizeObserver',
    'Request',
    'ReportingObserver',
    'ReadableStreamDefaultReader',
    'ReadableStreamDefaultController',
    'ReadableStreamBYOBRequest',
    'ReadableStreamBYOBReader',
    'ReadableStream',
    'ReadableByteStreamController',
    'Range',
    'RadioNodeList',
    'RTCTrackEvent',
    'RTCStatsReport',
    'RTCSessionDescription',
    'RTCSctpTransport',
    'RTCRtpTransceiver',
    'RTCRtpSender',
    'RTCRtpReceiver',
    'RTCPeerConnectionIceEvent',
    'RTCPeerConnectionIceErrorEvent',
    'RTCPeerConnection',
    'RTCIceCandidate',
    'RTCErrorEvent',
    'RTCError',
    'RTCEncodedVideoFrame',
    'RTCEncodedAudioFrame',
    'RTCDtlsTransport',
    'RTCDataChannelEvent',
    'RTCDataChannel',
    'RTCDTMFToneChangeEvent',
    'RTCDTMFSender',
    'RTCCertificate',
    'PromiseRejectionEvent',
    'ProgressEvent',
    'ProcessingInstruction',
    'PopStateEvent',
    'PointerEvent',
    'PluginArray',
    'Plugin',
    'PeriodicWave',
    'PerformanceTiming',
    'PerformanceServerTiming',
    'PerformanceResourceTiming',
    'PerformancePaintTiming',
    'PerformanceObserverEntryList',
    'PerformanceObserver',
    'PerformanceNavigationTiming',
    'PerformanceNavigation',
    'PerformanceMeasure',
    'PerformanceMark',
    'PerformanceLongTaskTiming',
    'PerformanceEventTiming',
    'PerformanceEntry',
    'PerformanceElementTiming',
    'Performance',
    'Path2D',
    'PannerNode',
    'PageTransitionEvent',
    'OverconstrainedError',
    'OscillatorNode',
    'OffscreenCanvasRenderingContext2D',
    'OffscreenCanvas',
    'OfflineAudioContext',
    'OfflineAudioCompletionEvent',
    'NodeList',
    'NodeIterator',
    'NodeFilter',
    'Node',
    'NetworkInformation',
    'Navigator',
    'NamedNodeMap',
    'MutationRecord',
    'MutationObserver',
    'MutationEvent',
    'MouseEvent',
    'MimeTypeArray',
    'MimeType',
    'MessagePort',
    'MessageEvent',
    'MessageChannel',
    'MediaStreamTrackEvent',
    'MediaStreamEvent',
    'MediaStreamAudioSourceNode',
    'MediaStreamAudioDestinationNode',
    'MediaStream',
    'MediaRecorder',
    'MediaQueryListEvent',
    'MediaQueryList',
    'MediaList',
    'MediaError',
    'MediaEncryptedEvent',
    'MediaElementAudioSourceNode',
    'MediaCapabilities',
    'Location',
    'LayoutShiftAttribution',
    'LayoutShift',
    'LargestContentfulPaint',
    'KeyframeEffect',
    'KeyboardEvent',
    'IntersectionObserverEntry',
    'IntersectionObserver',
    'InputEvent',
    'InputDeviceInfo',
    'InputDeviceCapabilities',
    'ImageData',
    'ImageCapture',
    'ImageBitmapRenderingContext',
    'ImageBitmap',
    'IdleDeadline',
    'IIRFilterNode',
    'IDBVersionChangeEvent',
    'IDBTransaction',
    'IDBRequest',
    'IDBOpenDBRequest',
    'IDBObjectStore',
    'IDBKeyRange',
    'IDBIndex',
    'IDBFactory',
    'IDBDatabase',
    'IDBCursorWithValue',
    'IDBCursor',
    'History',
    'Headers',
    'HashChangeEvent',
    'HTMLVideoElement',
    'HTMLUnknownElement',
    'HTMLUListElement',
    'HTMLTrackElement',
    'HTMLTitleElement',
    'HTMLTimeElement',
    'HTMLTextAreaElement',
    'HTMLTemplateElement',
    'HTMLTableSectionElement',
    'HTMLTableRowElement',
    'HTMLTableElement',
    'HTMLTableColElement',
    'HTMLTableCellElement',
    'HTMLTableCaptionElement',
    'HTMLStyleElement',
    'HTMLSpanElement',
    'HTMLSourceElement',
    'HTMLSlotElement',
    'HTMLSelectElement',
    'HTMLScriptElement',
    'HTMLQuoteElement',
    'HTMLProgressElement',
    'HTMLPreElement',
    'HTMLPictureElement',
    'HTMLParamElement',
    'HTMLParagraphElement',
    'HTMLOutputElement',
    'HTMLOptionsCollection',
    'HTMLOptionElement',
    'HTMLOptGroupElement',
    'HTMLObjectElement',
    'HTMLOListElement',
    'HTMLModElement',
    'HTMLMeterElement',
    'HTMLMetaElement',
    'HTMLMenuElement',
    'HTMLMediaElement',
    'HTMLMarqueeElement',
    'HTMLMapElement',
    'HTMLLinkElement',
    'HTMLLegendElement',
    'HTMLLabelElement',
    'HTMLLIElement',
    'HTMLInputElement',
    'HTMLImageElement',
    'HTMLIFrameElement',
    'HTMLHtmlElement',
    'HTMLHeadingElement',
    'HTMLHeadElement',
    'HTMLHRElement',
    'HTMLFrameSetElement',
    'HTMLFrameElement',
    'HTMLFormElement',
    'HTMLFormControlsCollection',
    'HTMLFontElement',
    'HTMLFieldSetElement',
    'HTMLEmbedElement',
    'HTMLElement',
    'HTMLDocument',
    'HTMLDivElement',
    'HTMLDirectoryElement',
    'HTMLDialogElement',
    'HTMLDetailsElement',
    'HTMLDataListElement',
    'HTMLDataElement',
    'HTMLDListElement',
    'HTMLCollection',
    'HTMLCanvasElement',
    'HTMLButtonElement',
    'HTMLBodyElement',
    'HTMLBaseElement',
    'HTMLBRElement',
    'HTMLAudioElement',
    'HTMLAreaElement',
    'HTMLAnchorElement',
    'HTMLAllCollection',
    'GeolocationPositionError',
    'GeolocationPosition',
    'GeolocationCoordinates',
    'Geolocation',
    'GamepadHapticActuator',
    'GamepadEvent',
    'GamepadButton',
    'Gamepad',
    'GainNode',
    'FormDataEvent',
    'FormData',
    'FontFaceSetLoadEvent',
    'FontFace',
    'FocusEvent',
    'FileReader',
    'FileList',
    'File',
    'FeaturePolicy',
    'External',
    'EventTarget',
    'EventSource',
    'EventCounts',
    'Event',
    'ErrorEvent',
    'ElementInternals',
    'Element',
    'DynamicsCompressorNode',
    'DragEvent',
    'DocumentType',
    'DocumentFragment',
    'Document',
    'DelayNode',
    'DecompressionStream',
    'DataTransferItemList',
    'DataTransferItem',
    'DataTransfer',
    'DOMTokenList',
    'DOMStringMap',
    'DOMStringList',
    'DOMRectReadOnly',
    'DOMRectList',
    'DOMRect',
    'DOMQuad',
    'DOMPointReadOnly',
    'DOMPoint',
    'DOMParser',
    'DOMMatrixReadOnly',
    'DOMMatrix',
    'DOMImplementation',
    'DOMException',
    'DOMError',
    'CustomEvent',
    'CustomElementRegistry',
    'Crypto',
    'CountQueuingStrategy',
    'ConvolverNode',
    'ConstantSourceNode',
    'CompressionStream',
    'CompositionEvent',
    'Comment',
    'CloseEvent',
    'ClipboardEvent',
    'CharacterData',
    'ChannelSplitterNode',
    'ChannelMergerNode',
    'CanvasRenderingContext2D',
    'CanvasPattern',
    'CanvasGradient',
    'CanvasFilter',
    'CanvasCaptureMediaStreamTrack',
    'CSSVariableReferenceValue',
    'CSSUnparsedValue',
    'CSSUnitValue',
    'CSSTranslate',
    'CSSTransformValue',
    'CSSTransformComponent',
    'CSSSupportsRule',
    'CSSStyleValue',
    'CSSStyleSheet',
    'CSSStyleRule',
    'CSSStyleDeclaration',
    'CSSSkewY',
    'CSSSkewX',
    'CSSSkew',
    'CSSScale',
    'CSSRuleList',
    'CSSRule',
    'CSSRotate',
    'CSSPropertyRule',
    'CSSPositionValue',
    'CSSPerspective',
    'CSSPageRule',
    'CSSNumericValue',
    'CSSNumericArray',
    'CSSNamespaceRule',
    'CSSMediaRule',
    'CSSMatrixComponent',
    'CSSMathValue',
    'CSSMathSum',
    'CSSMathProduct',
    'CSSMathNegate',
    'CSSMathMin',
    'CSSMathMax',
    'CSSMathInvert',
    'CSSMathClamp',
    'CSSLayerStatementRule',
    'CSSLayerBlockRule',
    'CSSKeywordValue',
    'CSSKeyframesRule',
    'CSSKeyframeRule',
    'CSSImportRule',
    'CSSImageValue',
    'CSSGroupingRule',
    'CSSFontFaceRule',
    'CSSCounterStyleRule',
    'CSSConditionRule',
    'CSS',
    'CDATASection',
    'ByteLengthQueuingStrategy',
    'BroadcastChannel',
    'BlobEvent',
    'Blob',
    'BiquadFilterNode',
    'BeforeUnloadEvent',
    'BeforeInstallPromptEvent',
    'BatteryManager',
    'BaseAudioContext',
    'BarProp',
    'AudioWorkletNode',
    'AudioScheduledSourceNode',
    'AudioProcessingEvent',
    'AudioParamMap',
    'AudioParam',
    'AudioNode',
    'AudioListener',
    'AudioDestinationNode',
    'AudioContext',
    'AudioBufferSourceNode',
    'AudioBuffer',
    'Attr',
    'AnimationEvent',
    'AnimationEffect',
    'Animation',
    'AnalyserNode',
    'AbstractRange',
    'AbortSignal',
    'AbortController',
    'window',
    'self',
    'document',
    'name',
    'location',
    'customElements',
    'history',
    'locationbar',
    'menubar',
    'personalbar',
    'scrollbars',
    'statusbar',
    'toolbar',
    'status',
    'closed',
    'frames',
    'length',
    'top',
    'opener',
    'parent',
    'frameElement',
    'navigator',
    'origin',
    'external',
    'screen',
    'innerWidth',
    'innerHeight',
    'scrollX',
    'pageXOffset',
    'scrollY',
    'pageYOffset',
    'visualViewport',
    'screenX',
    'screenY',
    'outerWidth',
    'outerHeight',
    'devicePixelRatio',
    'event',
    'clientInformation',
    'offscreenBuffering',
    'screenLeft',
    'screenTop',
    'defaultStatus',
    'defaultstatus',
    'styleMedia',
    'onsearch',
    'isSecureContext',
    'performance',
    'onappinstalled',
    'onbeforeinstallprompt',
    'crypto',
    'indexedDB',
    'webkitStorageInfo',
    'sessionStorage',
    'localStorage',
    'onbeforexrselect',
    'onabort',
    'onblur',
    'oncancel',
    'oncanplay',
    'oncanplaythrough',
    'onchange',
    'onclick',
    'onclose',
    'oncontextlost',
    'oncontextmenu',
    'oncontextrestored',
    'oncuechange',
    'ondblclick',
    'ondrag',
    'ondragend',
    'ondragenter',
    'ondragleave',
    'ondragover',
    'ondragstart',
    'ondrop',
    'ondurationchange',
    'onemptied',
    'onended',
    'onerror',
    'onfocus',
    'onformdata',
    'oninput',
    'oninvalid',
    'onkeydown',
    'onkeypress',
    'onkeyup',
    'onload',
    'onloadeddata',
    'onloadedmetadata',
    'onloadstart',
    'onmousedown',
    'onmouseenter',
    'onmouseleave',
    'onmousemove',
    'onmouseout',
    'onmouseover',
    'onmouseup',
    'onmousewheel',
    'onpause',
    'onplay',
    'onplaying',
    'onprogress',
    'onratechange',
    'onreset',
    'onresize',
    'onscroll',
    'onsecuritypolicyviolation',
    'onseeked',
    'onseeking',
    'onselect',
    'onslotchange',
    'onstalled',
    'onsubmit',
    'onsuspend',
    'ontimeupdate',
    'ontoggle',
    'onvolumechange',
    'onwaiting',
    'onwebkitanimationend',
    'onwebkitanimationiteration',
    'onwebkitanimationstart',
    'onwebkittransitionend',
    'onwheel',
    'onauxclick',
    'ongotpointercapture',
    'onlostpointercapture',
    'onpointerdown',
    'onpointermove',
    'onpointerup',
    'onpointercancel',
    'onpointerover',
    'onpointerout',
    'onpointerenter',
    'onpointerleave',
    'onselectstart',
    'onselectionchange',
    'onanimationend',
    'onanimationiteration',
    'onanimationstart',
    'ontransitionrun',
    'ontransitionstart',
    'ontransitionend',
    'ontransitioncancel',
    'onafterprint',
    'onbeforeprint',
    'onbeforeunload',
    'onhashchange',
    'onlanguagechange',
    'onmessage',
    'onmessageerror',
    'onoffline',
    'ononline',
    'onpagehide',
    'onpageshow',
    'onpopstate',
    'onrejectionhandled',
    'onstorage',
    'onunhandledrejection',
    'onunload',
    'alert',
    'atob',
    'blur',
    'btoa',
    'cancelAnimationFrame',
    'cancelIdleCallback',
    'captureEvents',
    'clearInterval',
    'clearTimeout',
    'close',
    'confirm',
    'createImageBitmap',
    'fetch',
    'find',
    'focus',
    'getComputedStyle',
    'getSelection',
    'matchMedia',
    'moveBy',
    'moveTo',
    'open',
    'postMessage',
    'print',
    'prompt',
    'queueMicrotask',
    'releaseEvents',
    'reportError',
    'requestAnimationFrame',
    'requestIdleCallback',
    'resizeBy',
    'resizeTo',
    'scroll',
    'scrollBy',
    'scrollTo',
    'setInterval',
    'setTimeout',
    'stop',
    'structuredClone',
    'webkitCancelAnimationFrame',
    'webkitRequestAnimationFrame',
    'Atomics',
    'chrome',
    'WebAssembly',
    'caches',
    'cookieStore',
    'ondevicemotion',
    'ondeviceorientation',
    'ondeviceorientationabsolute',
    'launchQueue',
    'onbeforematch',
    'AbsoluteOrientationSensor',
    'Accelerometer',
    'AudioWorklet',
    'Cache',
    'CacheStorage',
    'Clipboard',
    'ClipboardItem',
    'CookieChangeEvent',
    'CookieStore',
    'CookieStoreManager',
    'Credential',
    'CredentialsContainer',
    'CryptoKey',
    'DeviceMotionEvent',
    'DeviceMotionEventAcceleration',
    'DeviceMotionEventRotationRate',
    'DeviceOrientationEvent',
    'FederatedCredential',
    'Gyroscope',
    'Keyboard',
    'KeyboardLayoutMap',
    'LinearAccelerationSensor',
    'Lock',
    'LockManager',
    'MIDIAccess',
    'MIDIConnectionEvent',
    'MIDIInput',
    'MIDIInputMap',
    'MIDIMessageEvent',
    'MIDIOutput',
    'MIDIOutputMap',
    'MIDIPort',
    'MediaDeviceInfo',
    'MediaDevices',
    'MediaKeyMessageEvent',
    'MediaKeySession',
    'MediaKeyStatusMap',
    'MediaKeySystemAccess',
    'MediaKeys',
    'NavigationPreloadManager',
    'NavigatorManagedData',
    'OrientationSensor',
    'PasswordCredential',
    'RTCIceTransport',
    'RelativeOrientationSensor',
    'Sensor',
    'SensorErrorEvent',
    'ServiceWorker',
    'ServiceWorkerContainer',
    'ServiceWorkerRegistration',
    'StorageManager',
    'SubtleCrypto',
    'Worklet',
    'XRDOMOverlayState',
    'XRLayer',
    'XRWebGLBinding',
    'AudioData',
    'EncodedAudioChunk',
    'EncodedVideoChunk',
    'ImageTrack',
    'ImageTrackList',
    'VideoColorSpace',
    'VideoFrame',
    'AudioDecoder',
    'AudioEncoder',
    'ImageDecoder',
    'VideoDecoder',
    'VideoEncoder',
    'AuthenticatorAssertionResponse',
    'AuthenticatorAttestationResponse',
    'AuthenticatorResponse',
    'PublicKeyCredential',
    'Bluetooth',
    'BluetoothCharacteristicProperties',
    'BluetoothDevice',
    'BluetoothRemoteGATTCharacteristic',
    'BluetoothRemoteGATTDescriptor',
    'BluetoothRemoteGATTServer',
    'BluetoothRemoteGATTService',
    'EyeDropper',
    'FileSystemDirectoryHandle',
    'FileSystemFileHandle',
    'FileSystemHandle',
    'FileSystemWritableFileStream',
    'FragmentDirective',
    'GravitySensor',
    'HID',
    'HIDConnectionEvent',
    'HIDDevice',
    'HIDInputReportEvent',
    'IdleDetector',
    'LaunchParams',
    'LaunchQueue',
    'MediaStreamTrackGenerator',
    'MediaStreamTrackProcessor',
    'OTPCredential',
    'PaymentAddress',
    'PaymentRequest',
    'PaymentResponse',
    'PaymentMethodChangeEvent',
    'Presentation',
    'PresentationAvailability',
    'PresentationConnection',
    'PresentationConnectionAvailableEvent',
    'PresentationConnectionCloseEvent',
    'PresentationConnectionList',
    'PresentationReceiver',
    'PresentationRequest',
    'Profiler',
    'Scheduling',
    'ScreenDetailed',
    'ScreenDetails',
    'Serial',
    'SerialPort',
    'USB',
    'USBAlternateInterface',
    'USBConfiguration',
    'USBConnectionEvent',
    'USBDevice',
    'USBEndpoint',
    'USBInTransferResult',
    'USBInterface',
    'USBIsochronousInTransferPacket',
    'USBIsochronousInTransferResult',
    'USBIsochronousOutTransferPacket',
    'USBIsochronousOutTransferResult',
    'USBOutTransferResult',
    'VirtualKeyboard',
    'WakeLock',
    'WakeLockSentinel',
    'WebTransport',
    'WebTransportBidirectionalStream',
    'WebTransportDatagramDuplexStream',
    'WebTransportError',
    'XRAnchor',
    'XRAnchorSet',
    'XRBoundedReferenceSpace',
    'XRFrame',
    'XRInputSource',
    'XRInputSourceArray',
    'XRInputSourceEvent',
    'XRInputSourcesChangeEvent',
    'XRPose',
    'XRReferenceSpace',
    'XRReferenceSpaceEvent',
    'XRRenderState',
    'XRRigidTransform',
    'XRSession',
    'XRSessionEvent',
    'XRSpace',
    'XRSystem',
    'XRView',
    'XRViewerPose',
    'XRViewport',
    'XRWebGLLayer',
    'XRCPUDepthInformation',
    'XRDepthInformation',
    'XRWebGLDepthInformation',
    'XRHitTestResult',
    'XRHitTestSource',
    'XRRay',
    'XRTransientInputHitTestResult',
    'XRTransientInputHitTestSource',
    'XRLightEstimate',
    'XRLightProbe',
    'getScreenDetails',
    'showDirectoryPicker',
    'showOpenFilePicker',
    'showSaveFilePicker',
    'originAgentCluster',
    'trustedTypes',
    'navigation',
    'speechSynthesis',
    'onpointerrawupdate',
    'crossOriginIsolated',
    'scheduler',
    'AnimationPlaybackEvent',
    'AnimationTimeline',
    'CSSAnimation',
    'CSSTransition',
    'DocumentTimeline',
    'BackgroundFetchManager',
    'BackgroundFetchRecord',
    'BackgroundFetchRegistration',
    'BluetoothUUID',
    'CSSFontPaletteValuesRule',
    'CustomStateSet',
    'DelegatedInkTrailPresenter',
    'Ink',
    'MediaMetadata',
    'MediaSession',
    'MediaSource',
    'SourceBuffer',
    'SourceBufferList',
    'MediaStreamTrack',
    'NavigateEvent',
    'Navigation',
    'NavigationCurrentEntryChangeEvent',
    'NavigationDestination',
    'NavigationHistoryEntry',
    'NavigationTransition',
    'NavigatorUAData',
    'Notification',
    'PaymentInstruments',
    'PaymentManager',
    'PaymentRequestUpdateEvent',
    'PeriodicSyncManager',
    'PermissionStatus',
    'Permissions',
    'PictureInPictureEvent',
    'PictureInPictureWindow',
    'PushManager',
    'PushSubscription',
    'PushSubscriptionOptions',
    'RemotePlayback',
    'Scheduler',
    'TaskController',
    'TaskPriorityChangeEvent',
    'TaskSignal',
    'SharedWorker',
    'SpeechSynthesisErrorEvent',
    'SpeechSynthesisEvent',
    'SpeechSynthesisUtterance',
    'TrustedHTML',
    'TrustedScript',
    'TrustedScriptURL',
    'TrustedTypePolicy',
    'TrustedTypePolicyFactory',
    'URLPattern',
    'VideoPlaybackQuality',
    'VirtualKeyboardGeometryChangeEvent',
    'XSLTProcessor',
    'webkitSpeechGrammar',
    'webkitSpeechGrammarList',
    'webkitSpeechRecognition',
    'webkitSpeechRecognitionError',
    'webkitSpeechRecognitionEvent',
    'openDatabase',
    'webkitRequestFileSystem',
    'webkitResolveLocalFileSystemURL',
    'script1655225899000',
    'Stacks',
    'clc',
    'clc_request',
    'gaplugins',
    'webpackChunkstackoverflow',
    'EventEmitter',
    'klass',
    'moveScroller',
    'styleCode',
    'initTagRenderer',
    'initFadingHelpText',
    'UniversalAuth',
    'Svg',
    'tagRendererRaw',
    'tagRenderer',
    'gaGlobal',
    'gaData',
    'siteIncludesLoaded',
    'goog_sdr_l',
    'hljs',
    'Commonmark',
    'Markdown',
    'apiCallbacks',
    'enableTables',
    'getAllProperties',
    'dir',
    'dirxml',
    'profile',
    'profileEnd',
    'clear',
    'table',
    'keys',
    'values',
    'debug',
    'undebug',
    'monitor',
    'unmonitor',
    'inspect',
    'copy',
    'queryObjects',
    'getEventListeners',
    'getAccessibleName',
    'getAccessibleRole',
    'monitorEvents',
    'unmonitorEvents',
    'TEMPORARY',
    'PERSISTENT',
    'constructor',
    'addEventListener',
    'dispatchEvent',
    'removeEventListener',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toString',
    'valueOf',
    'toLocaleString',
    // TODO: Probbably update by script and remove all browser-extension related stuff
    //     ! When updating preserve commented stuff !
];
/**/

/*/
// Note: This is happening after this scipt - use this to debug

//----- Added by Colldev
const virtualWindow = module.exports((moduleDefinition) => {
    console.log(moduleDefinition.manifest);
});
Object.assign(global, virtualWindow);
//----- Added by module

console.log(URL, URL.createObjectURL);
URL.createObjectURL(new Blob());
declareModule({ manifest: { name: '@ddd' }, setup() {} });
/**/

/**
 * TODO: Delete a file and keep reference to last commit at extractManifestFromBundleContent description
 */
